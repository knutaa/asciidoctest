openapi: 3.0.1
info:
  title: Product Ordering
  description: >-
    **TMF API Reference : TMF 622 - Product Ordering Management**

    The Product Ordering API provides a standardized mechanism for placing a product order with all
    of the necessary order parameters. The API consists of a simple set of operations that interact
    with CRM/Order Negotiation systems in a consistent manner. A product order is created based on a
    product offer that is defined in a catalog. The product offer identifies the product or set of
    products that are available to a customer, and includes characteristics such as pricing, product
    options and market. This API provide a task based resource to request order cancellation.

    The product order references the product offer and identifies any specific requests made by the
    customer.

    **Product Order resource**

    A Product Order is a type of order which can be used to place an order between a customer and a
    service provider or between a service provider and a partner and vice versa. Main Product Order
    attributes are its identifier, state, priority category (mass market, Enterprise, etc.) related
    dates (start, completion, etc.), related billing account, related parties and order items. Main
    Order Items (aka order lines) attributes are the ordered offering and product characteristics
    with the related action to be performed (e.g. add or delete the products), state, location
    information for delivery, order item price and price alteration.

    Product Order API performs the following operations on product order :
       -Retrieval of a product order or a collection of product orders depending on filter criteria
        -Partial update of a product order (including updating rules)
       -Creation of a product order (including default values and creation rules)
       -Deletion of product order (for administration purposes)
        -Notification of events on product order.
    **cancelProductOrder resource**

    This resource is used to request a product order cancellation.

    Product Order API performs the following operations on product order :
       -Retrieval of a cancel product order or a collection of cancel product orders 
       -Creation of a cancel product order 
       -Notification of events on cancel product order.
  version: 4.0.0
servers:
  - url: 'https://serverRoot'
tags:
  - name: productOrder
    description: Operations for ProductOrder Resource
  - name: cancelProductOrder
    description: Operations for CancelProductOrder Resource
  - name: notification listener
    description: Notifications for Resource Lifecycle and event notifications
  - name: events subscription
    description: Endpoints to register and terminate an Event Listener
paths:
  /productOrder:
    get:
      tags:
        - productOrder
      summary: List or find ProductOrder objects
      description: >-
        This operation retrieves a ProductOrder entity. Attribute selection enabled for all first
        level attributes.
      operationId: listProductOrder
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/200ProductOrderArray'
        default:
          $ref: '#/components/responses/Error'
    post:
      tags:
        - productOrder
      summary: Creates a ProductOrder
      description: This operation creates a ProductOrder entity.
      operationId: createProductOrder
      requestBody:
        $ref: '#/components/requestBodies/ProductOrder_Create'
      responses:
        '201':
          $ref: '#/components/responses/201ProductOrder'
        default:
          $ref: '#/components/responses/Error'
  '/productOrder/{id}':
    get:
      tags:
        - productOrder
      summary: Retrieves a ProductOrder by ID
      description: List or find ProductOrder objects
      operationId: retrieveProductOrder
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/200ProductOrder'
        default:
          $ref: '#/components/responses/Error'
    patch:
      tags:
        - productOrder
      summary: Updates partially a ProductOrder
      description: This operation updates partially a ProductOrder entity.
      operationId: patchProductOrder
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        $ref: '#/components/requestBodies/ProductOrder_Update'
      responses:
        '200':
          $ref: '#/components/responses/200ProductOrder'
        default:
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - productOrder
      summary: Deletes a ProductOrder
      description: This operation deletes a ProductOrder entity.
      operationId: deleteProductOrder
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          $ref: '#/components/responses/204'
        default:
          $ref: '#/components/responses/Error'
  /listener/productOrderCreateEvent:
    post:
      tags:
        - notification listener
      summary: Client listener for entity ProductOrderCreateEvent
      description: Example of a client listener for receiving the notification ProductOrderCreateEvent
      operationId: productOrderCreateEvent
      requestBody:
        description: The event data
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/ProductOrderCreateEvent'
        required: true
      responses:
        '201':
          description: Notified
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
  /listener/productOrderAttributevaluechangeEvent:
    post:
      tags:
        - notification listener
      summary: Client listener for entity ProductOrderCreateEvent
      description: >-
        Example of a client listener for receiving the notification
        ProductOrderAttributevaluechangeEvent
      operationId: productOrderAttributevaluechangeEvent
      requestBody:
        description: The event data
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/ProductOrderAttributevaluechangeEvent'
        required: true
      responses:
        '201':
          description: Notified
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
  /listener/productOrderDeleteEvent:
    post:
      tags:
        - notification listener
      summary: Client listener for entity ProductOrderCreateEvent
      description: Example of a client listener for receiving the notification ProductOrderDeleteEvent
      operationId: productOrderDeleteEvent
      requestBody:
        description: The event data
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/ProductOrderDeleteEvent'
        required: true
      responses:
        '201':
          description: Notified
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
  /listener/productOrderStatechangeEvent:
    post:
      tags:
        - notification listener
      summary: Client listener for entity ProductOrderCreateEvent
      description: Example of a client listener for receiving the notification ProductOrderStatechangeEvent
      operationId: productOrderStatechangeEvent
      requestBody:
        description: The event data
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/ProductOrderStatechangeEvent'
        required: true
      responses:
        '201':
          description: Notified
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
  /listener/productOrderInformationrequiredEvent:
    post:
      tags:
        - notification listener
      summary: Client listener for entity ProductOrderCreateEvent
      description: >-
        Example of a client listener for receiving the notification
        ProductOrderInformationrequiredEvent
      operationId: productOrderInformationrequiredEvent
      requestBody:
        description: The event data
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/ProductOrderInformationrequiredEvent'
        required: true
      responses:
        '201':
          description: Notified
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
  /cancelProductOrder:
    get:
      tags:
        - cancelProductOrder
      summary: List or find CancelProductOrder objects
      description: >-
        This operation retrieves a CancelProductOrder entity. Attribute selection enabled for all
        first level attributes.
      operationId: listCancelProductOrder
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/200CancelProductOrderArray'
        default:
          $ref: '#/components/responses/Error'
    post:
      tags:
        - cancelProductOrder
      summary: Creates a CancelProductOrder
      description: This operation creates a CancelProductOrder entity.
      operationId: createCancelProductOrder
      requestBody:
        $ref: '#/components/requestBodies/CancelProductOrder_Create'
      responses:
        '201':
          $ref: '#/components/responses/201CancelProductOrder'
        default:
          $ref: '#/components/responses/Error'
  '/cancelProductOrder/{id}':
    get:
      tags:
        - cancelProductOrder
      summary: Retrieves a CancelProductOrder by ID
      description: List or find CancelProductOrder objects
      operationId: retrieveCancelProductOrder
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/200CancelProductOrder'
        default:
          $ref: '#/components/responses/Error'
  /listener/cancelProductOrderCreateEvent:
    post:
      tags:
        - notification listener
      summary: Client listener for entity CancelProductOrderCreateEvent
      description: Example of a client listener for receiving the notification CancelProductOrderCreateEvent
      operationId: cancelProductOrderCreateEvent
      requestBody:
        description: The event data
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/CancelProductOrderCreateEvent'
        required: true
      responses:
        '201':
          description: Notified
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
  /listener/cancelProductOrderStatechangeEvent:
    post:
      tags:
        - notification listener
      summary: Client listener for entity CancelProductOrderCreateEvent
      description: >-
        Example of a client listener for receiving the notification
        CancelProductOrderStatechangeEvent
      operationId: cancelProductOrderStatechangeEvent
      requestBody:
        description: The event data
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/CancelProductOrderStatechangeEvent'
        required: true
      responses:
        '201':
          description: Notified
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
  /listener/cancelProductOrderInformationrequiredEvent:
    post:
      tags:
        - notification listener
      summary: Client listener for entity CancelProductOrderCreateEvent
      description: >-
        Example of a client listener for receiving the notification
        CancelProductOrderInformationrequiredEvent
      operationId: cancelProductOrderInformationrequiredEvent
      requestBody:
        description: The event data
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/CancelProductOrderInformationrequiredEvent'
        required: true
      responses:
        '201':
          description: Notified
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
  /hub:
    post:
      operationId: registerListener
      summary: Register a listener
      description: >-
        Sets the communication endpoint address the service instance must use to deliver information
        about its health state, execution state, failures and metrics.
      tags:
        - events subscription
      requestBody:
        $ref: '#/components/requestBodies/EventSubscriptionInput'
      responses:
        '201':
          $ref: '#/components/responses/EventSubscription'
        default:
          $ref: '#/components/responses/Error'
  '/hub/{id}':
    delete:
      operationId: unregisterListener
      summary: Unregister a listener
      description: >-
        Resets the communication endpoint address the service instance must use to deliver
        information about its health state, execution state, failures and metrics.
      tags:
        - events subscription
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          description: Deleted
        default:
          $ref: '#/components/responses/Error'
components:
  schemas:
    ProductOrder:
      type: object
      required:
        - productOrderItem
      description: >-
        A Product Order is a type of order which  can  be used to place an order between a customer
        and a service provider or between a service provider and a partner and vice versa,
      properties:
        agreement:
          type: array
          description: A reference to an agreement defined in the context of the product order
          items:
            $ref: '#/components/schemas/AgreementRef'
        billingAccount:
          $ref: '#/components/schemas/BillingAccountRef'
        cancellationDate:
          type: string
          format: date-time
          description: 'Date when the order is cancelled. This is used when order is cancelled. '
        cancellationReason:
          type: string
          description: 'Reason why the order is cancelled. This is used when order is cancelled. '
        category:
          type: string
          description: >-
            Used to categorize the order from a business perspective that can be useful for the OM
            system (e.g. "enterprise", "residential", ...)
        channel:
          type: array
          items:
            $ref: '#/components/schemas/RelatedChannel'
        completionDate:
          type: string
          format: date-time
          description: Date when the order was completed
        description:
          type: string
          description: Description of the product order
        expectedCompletionDate:
          type: string
          format: date-time
          description: Expected delivery date amended by the provider
        externalId:
          type: string
          description: >-
            ID given by the consumer and only understandable by him (to facilitate his searches
            afterwards)
        href:
          type: string
          description: Hyperlink to access the order
        id:
          type: string
          description: ID created on repository side (OM system)
        note:
          type: array
          items:
            $ref: '#/components/schemas/Note'
        notificationContact:
          type: string
          description: Contact attached to the order to send back information regarding this order
        orderDate:
          type: string
          format: date-time
          description: Date when the order was created
        orderTotalPrice:
          type: array
          items:
            $ref: '#/components/schemas/OrderPrice'
        payment:
          type: array
          items:
            $ref: '#/components/schemas/PaymentRef'
        priority:
          type: string
          description: >-
            A way that can be used by consumers to prioritize orders in OM system (from 0 to 4 : 0
            is the highest priority, and 4 the lowest)
        productOfferingQualification:
          type: array
          items:
            $ref: '#/components/schemas/ProductOfferingQualificationRef'
        quote:
          type: array
          items:
            $ref: '#/components/schemas/QuoteRef'
        productOrderItem:
          type: array
          items:
            $ref: '#/components/schemas/ProductOrderItem'
          minItems: 1
        relatedParty:
          type: array
          items:
            $ref: '#/components/schemas/RelatedParty'
        requestedCompletionDate:
          type: string
          format: date-time
          description: Requested delivery date from the requestor perspective
        requestedStartDate:
          type: string
          format: date-time
          description: >-
            Order fulfillment start date wished by the requestor. This is used when, for any reason,
            requestor cannot allow seller to begin to operationally begin the fulfillment before a
            date. 
        state:
          $ref: '#/components/schemas/ProductOrderStateType'
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          ProductOrder: '#/components/schemas/ProductOrder'
    AgreementRef:
      description: >-
        Agreement reference. An agreement represents a contract or arrangement, either written or
        verbal and sometimes enforceable by law, such as a service level agreement or a customer
        price agreement. An agreement involves a number of other business entities, such as
        products, services, and resources and/or their specifications.
      type: object
      properties:
        name:
          type: string
          description: Name of the agreement
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          AgreementRef: '#/components/schemas/AgreementRef'
    BillingAccountRef:
      description: BillingAccount reference. A BillingAccount is a detailed description of a bill structure.
      type: object
      properties:
        href:
          type: string
          description: Reference of the billing account
        id:
          type: string
          description: Unique identifier of the billing account
        name:
          type: string
          description: Name of the billing account
        ratingType:
          type: string
          description: >-
            Indicates whether the account follows a specific payment option such as prepaid or
            postpaid
        '@referredType':
          type: string
          description: The actual type of the target instance when needed for disambiguation.
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          BillingAccountRef: '#/components/schemas/BillingAccountRef'
    RelatedChannel:
      type: object
      description: 'Related channel to another entity. May be online web, mobile app, social ,etc.'
      properties:
        name:
          type: string
          description: Name of the channel.
        role:
          type: string
          description: Role playing by the channel.
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          RelatedChannel: '#/components/schemas/RelatedChannel'
    Note:
      description: Extra information about a given entity
      type: object
      properties:
        id:
          type: string
          description: Identifier of the note within its containing entity
          example:
            - afa9-3d90aaa8da0f
        author:
          type: string
          description: Author of the note
          example:
            - Mr. N. Bene
        date:
          type: string
          format: date-time
          description: Date of the note
          example:
            - '2020-11-20T08:00:00Z'
        text:
          type: string
          description: Text of the note
          example:
            - This is important
      allOf:
        - $ref: '#/components/schemas/Extensible'
      discriminator:
        propertyName: '@type'
        mapping:
          Note: '#/components/schemas/Note'
    OrderPrice:
      description: >-
        An amount, usually of money, that represents the actual price paid by the Customer for this
        item or this order
      type: object
      properties:
        description:
          type: string
          description: A narrative that explains in detail the semantics of this order item price.
        name:
          type: string
          description: A short descriptive name such as "Subscription price".
        productOfferingPrice:
          $ref: '#/components/schemas/ProductOfferingPriceRef'
        priceType:
          type: string
          description: >-
            A category that describes the price, such as recurring, discount, allowance, penalty,
            and so forth
        recurringChargePeriod:
          type: string
          description: 'Could be month, week...'
        unitOfMeasure:
          type: string
          description: 'Could be minutes, GB...'
        billingAccount:
          $ref: '#/components/schemas/BillingAccountRef'
        price:
          $ref: '#/components/schemas/Price'
        priceAlteration:
          type: array
          description: a strucuture used to describe a price alteration
          items:
            $ref: '#/components/schemas/PriceAlteration'
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          OrderPrice: '#/components/schemas/OrderPrice'
    PaymentRef:
      type: object
      description: >-
        If an immediate payment has been done at the product order submission, the payment
        information are captured and stored (as a reference) in the order.
      properties:
        name:
          type: string
          description: A name for the payment
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          PaymentRef: '#/components/schemas/PaymentRef'
    ProductOfferingQualificationRef:
      type: object
      description: It's a productOfferingQualification that has been executed previously
      properties: {}
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          ProductOfferingQualificationRef: '#/components/schemas/ProductOfferingQualificationRef'
    QuoteRef:
      type: object
      description: It's a Quote that has been executed previously
      properties: {}
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          QuoteRef: '#/components/schemas/QuoteRef'
    ProductOrderItem:
      type: object
      description: An identified part of the order. A product order is decomposed into one or more order items.
      properties:
        id:
          type: string
          description: 'Identifier of the line item (generally it is a sequence number 01, 02, 03, ...)'
        quantity:
          type: integer
          description: Quantity ordered
        action:
          $ref: '#/components/schemas/OrderItemActionType'
        appointment:
          $ref: '#/components/schemas/AppointmentRef'
        billingAccount:
          $ref: '#/components/schemas/BillingAccountRef'
        itemPrice:
          type: array
          items:
            $ref: '#/components/schemas/OrderPrice'
        itemTerm:
          type: array
          items:
            $ref: '#/components/schemas/OrderTerm'
        itemTotalPrice:
          type: array
          items:
            $ref: '#/components/schemas/OrderPrice'
        payment:
          type: array
          items:
            $ref: '#/components/schemas/PaymentRef'
        product:
          $ref: '#/components/schemas/ProductRefOrValue'
        productOffering:
          $ref: '#/components/schemas/ProductOfferingRef'
        productOfferingQualificationItem:
          $ref: '#/components/schemas/ProductOfferingQualificationItemRef'
        quoteItem:
          $ref: '#/components/schemas/QuoteItemRef'
        productOrderItem:
          type: array
          items:
            $ref: '#/components/schemas/ProductOrderItem'
        productOrderItemRelationship:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemRelationship'
        qualification:
          type: array
          items:
            $ref: '#/components/schemas/ProductOfferingQualificationRef'
        state:
          $ref: '#/components/schemas/ProductOrderItemStateType'
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          ProductOrderItem: '#/components/schemas/ProductOrderItem'
    RelatedParty:
      description: >-
        Related Entity reference. A related party defines party or party role linked to a specific
        entity.
      type: object
      required:
        - id
        - '@referredType'
      properties:
        role:
          type: string
          description: Role played by the related party
        '@referredType':
          type: string
          description: The actual type of the target instance when needed for disambiguation.
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          RelatedParty: '#/components/schemas/RelatedParty'
    ProductOrderStateType:
      type: string
      description: Possible values for the state of the order
      enum:
        - acknowledged
        - rejected
        - pending
        - held
        - inProgress
        - cancelled
        - completed
        - failed
        - partial
        - assessingCancellation
        - pendingCancellation
    Entity:
      type: object
      description: Base entity schema for use in TMForum Open-APIs
      properties: {}
      allOf:
        - $ref: '#/components/schemas/Addressable'
        - $ref: '#/components/schemas/Extensible'
      discriminator:
        propertyName: '@type'
        mapping:
          Entity: '#/components/schemas/Entity'
    EntityRef:
      description: Entity reference schema to be use for all entityRef class.
      type: object
      properties:
        name:
          type: string
          description: Name of the related entity.
        '@referredType':
          type: string
          description: The actual type of the target instance when needed for disambiguation.
      allOf:
        - $ref: '#/components/schemas/Addressable'
        - $ref: '#/components/schemas/Extensible'
      discriminator:
        propertyName: '@type'
        mapping:
          EntityRef: '#/components/schemas/EntityRef'
    Extensible:
      type: object
      description: Base Extensible schema for use in TMForum Open-APIs
      properties:
        '@schemaLocation':
          type: string
          format: uri
          description: A URI to a JSON-Schema file that defines additional attributes and relationships
        '@baseType':
          type: string
          description: 'When sub-classing, this defines the super-class'
        '@type':
          type: string
          description: 'When sub-classing, this defines the sub-class Extensible name'
    ProductOfferingPriceRef:
      description: >-
        ProductPriceOffering reference. An amount, usually of money, that is asked for or allowed
        when a ProductOffering is bought, rented, or leased
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          ProductOfferingPriceRef: '#/components/schemas/ProductOfferingPriceRef'
    Price:
      description: >-
        Provides all amounts (tax included, duty free, tax rate), used currency and percentage to
        apply for Price Alteration.
      type: object
      properties:
        dutyFreeAmount:
          $ref: '#/components/schemas/Money'
        percentage:
          type: number
          format: float
          description: Percentage to apply for ProdOfferPriceAlteration
        taxIncludedAmount:
          $ref: '#/components/schemas/Money'
        taxRate:
          type: number
          format: float
          description: Tax rate
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          Price: '#/components/schemas/Price'
    PriceAlteration:
      description: 'Is an amount, usually of money, that modifies the price charged for an order item.'
      type: object
      required:
        - priceType
        - price
      properties:
        applicationDuration:
          type: integer
          description: >-
            Duration during which the alteration applies on the order item price (for instance 2
            months free of charge for the recurring charge)
        description:
          type: string
          description: A narrative that explains in detail the semantics of this order item price alteration
        name:
          type: string
          description: Name of the order item price alteration
        productOfferingPrice:
          $ref: '#/components/schemas/ProductOfferingPriceRef'
        priceType:
          type: string
          description: 'A category that describes the price such as recurring, one time and usage.'
        priority:
          type: integer
          description: >-
            Priority level for applying this alteration among all the defined alterations on the
            order item price
        recurringChargePeriod:
          type: string
          description: 'Could be month, week...'
        unitOfMeasure:
          type: string
          description: 'Could be minutes, GB...'
        price:
          $ref: '#/components/schemas/Price'
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          PriceAlteration: '#/components/schemas/PriceAlteration'
    OrderItemActionType:
      description: action to be performed on the product
      type: string
      enum:
        - add
        - modify
        - delete
        - noChange
    AppointmentRef:
      description: 'Refers an appointment, such as a Customer presentation or internal meeting or site visit'
      type: object
      properties:
        description:
          type: string
          description: An explanatory text regarding the appointment made with a party
        href:
          type: string
          description: The reference of the appointment
        id:
          type: string
          description: The identifier of the referred appointment
        '@referredType':
          type: string
          description: The actual type of the target instance when needed for disambiguation
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          AppointmentRef: '#/components/schemas/AppointmentRef'
    OrderTerm:
      description: >-
        Description of a productTerm linked to this orderItem. This represent a commitment with a
        duration
      type: object
      properties:
        description:
          type: string
          description: Description of the productOrderTerm
        duration:
          $ref: '#/components/schemas/Quantity'
        name:
          type: string
          description: Name of the productOrderTerm
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          OrderTerm: '#/components/schemas/OrderTerm'
    ProductRefOrValue:
      description: >-
        A product to be created defined by value or existing defined by reference. The polymorphic
        attributes @type, @schemaLocation & @referredType are related to the product entity and not
        the RelatedProductRefOrValue class itself
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/ProductRef'
        - $ref: '#/components/schemas/Product'
    ProductOfferingRef:
      description: >-
        ProductOffering reference. A product offering represents entities that are orderable from
        the provider of the catalog, this resource includes pricing information.
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          ProductOfferingRef: '#/components/schemas/ProductOfferingRef'
    ProductOfferingQualificationItemRef:
      type: object
      description: It's a productOfferingQualification item that has been executed previously.
      required:
        - id
        - productOfferingQualificationId
      properties:
        '@referredType':
          type: string
          description: The actual type of the target instance when needed for disambiguation.
        productOfferingQualificationHref:
          type: string
          description: Reference of the related entity.
        productOfferingQualificationId:
          type: string
          description: Unique identifier of a related entity.
        productOfferingQualificationName:
          type: string
          description: Name of the related entity.
        id:
          type: string
          description: Id of an item of a product offering qualification
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          ProductOfferingQualificationItemRef: '#/components/schemas/ProductOfferingQualificationItemRef'
    QuoteItemRef:
      type: object
      description: It's a Quote item that has been executed previously.
      required:
        - id
        - quoteId
      properties:
        quoteHref:
          type: string
          description: Reference of the related entity.
        quoteId:
          type: string
          description: Unique identifier of a related entity.
        quoteName:
          type: string
          description: Name of the related entity.
        id:
          type: string
          description: Id of an item of a quote
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          QuoteItemRef: '#/components/schemas/QuoteItemRef'
    OrderItemRelationship:
      type: object
      properties:
        id:
          type: string
        relationshipType:
          type: string
          description: The type of order item relationship
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          OrderItemRelationship: '#/components/schemas/OrderItemRelationship'
    ProductOrderItemStateType:
      type: string
      description: Possible values for the state of the product order item
      enum:
        - acknowledged
        - rejected
        - pending
        - held
        - inProgress
        - cancelled
        - completed
        - failed
        - assessingCancellation
        - pendingCancellation
    Addressable:
      type: object
      description: Base schema for adressable entities
      properties:
        href:
          type: string
          format: uri
          description: Hyperlink reference
        id:
          type: string
          description: unique identifier
    Money:
      description: A base / value business entity used to represent money
      type: object
      properties:
        unit:
          type: string
          description: Currency (ISO4217 norm uses 3 letters to define the currency)
        value:
          type: number
          format: float
          description: A positive floating point number
    Quantity:
      type: object
      description: An amount in a given unit
      properties:
        amount:
          type: number
          format: float
          default: 1
          description: Numeric value in a given unit
        units:
          type: string
          description: Unit
    ProductRef:
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          ProductRef: '#/components/schemas/ProductRef'
    Product:
      type: object
      description: >-
        A product offering procured by a customer or other interested party playing a party role. A
        product is realized as one or more service(s) and / or resource(s).
      properties:
        randomAtt:
          type: string
        agreement:
          type: array
          items:
            $ref: '#/components/schemas/AgreementItemRef'
        billingAccount:
          $ref: '#/components/schemas/BillingAccountRef'
        description:
          type: string
          description: >-
            Is the description of the product. It could be copied from the description of the
            Product Offering.
        href:
          type: string
          description: Reference of the product
        id:
          type: string
          description: Unique identifier of the product
        isBundle:
          type: boolean
          description: >-
            If true, the product is a ProductBundle which is an instantiation of a
            BundledProductOffering. If false, the product is a ProductComponent which is an
            instantiation of a SimpleProductOffering.
        isCustomerVisible:
          type: boolean
          description: 'If true, the product is visible by the customer.'
        name:
          type: string
          description: Name of the product. It could be the same as the name of the product offering
        orderDate:
          type: string
          format: date-time
          description: Is the date when the product was ordered
        productCharacteristic:
          type: array
          items:
            $ref: '#/components/schemas/Characteristic'
        productOffering:
          $ref: '#/components/schemas/ProductOfferingRef'
        productOrderItem:
          type: array
          items:
            $ref: '#/components/schemas/RelatedProductOrderItem'
        product:
          type: array
          items:
            $ref: '#/components/schemas/ProductRefOrValue'
        productPrice:
          type: array
          items:
            $ref: '#/components/schemas/ProductPrice'
        productRelationship:
          type: array
          items:
            $ref: '#/components/schemas/ProductRelationship'
        productSerialNumber:
          type: string
          description: >-
            Is the serial number for the product. This is typically applicable to tangible products
            e.g. Broadband Router.
        productSpecification:
          $ref: '#/components/schemas/ProductSpecificationRef'
        productTerm:
          type: array
          items:
            $ref: '#/components/schemas/ProductTerm'
        realizingResource:
          type: array
          items:
            $ref: '#/components/schemas/ResourceRef'
        realizingService:
          type: array
          items:
            $ref: '#/components/schemas/ServiceRef'
        relatedParty:
          type: array
          items:
            $ref: '#/components/schemas/RelatedParty'
        place:
          type: array
          items:
            $ref: '#/components/schemas/RelatedPlaceRefOrValue'
        startDate:
          type: string
          format: date-time
          description: Is the date from which the product starts
        status:
          $ref: '#/components/schemas/ProductStatusType'
        terminationDate:
          type: string
          format: date-time
          description: Is the date when the product was terminated
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          Product: '#/components/schemas/Product'
    AgreementItemRef:
      description: >-
        Agreement reference. An agreement represents a contract or arrangement, either written or
        verbal and sometimes enforceable by law, such as a service level agreement or a customer
        price agreement. An agreement involves a number of other business entities, such as
        products, services, and resources and/or their specifications.
      type: object
      properties:
        agreementItemId:
          type: string
          description: Identifier of the agreement
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          AgreementItemRef: '#/components/schemas/AgreementItemRef'
    Characteristic:
      description: Describes a given characteristic of an object or entity through a name/value pair.
      type: object
      required:
        - name
        - value
      properties:
        id:
          type: string
          description: Unique identifier of the characteristic
        name:
          type: string
          description: Name of the characteristic
        valueType:
          type: string
          description: Data type of the value of the characteristic
        value:
          $ref: '#/components/schemas/Any'
        characteristicRelationship:
          type: array
          items:
            $ref: '#/components/schemas/CharacteristicRelationship'
      allOf:
        - $ref: '#/components/schemas/Extensible'
      discriminator:
        propertyName: '@type'
        mapping:
          Characteristic: '#/components/schemas/Characteristic'
    RelatedProductOrderItem:
      type: object
      description: >-
        RelatedProductOrderItem (ProductOrder item) .The product order item which triggered product
        creation/change/termination.
      required:
        - orderItemId
        - productOrderId
      properties:
        '@referredType':
          type: string
          description: The actual type of the target instance when needed for disambiguation.
        productOrderHref:
          type: string
          description: Reference of the related entity.
        productOrderId:
          type: string
          description: Unique identifier of a related entity.
        orderItemAction:
          type: string
          description: Action of the order item for this product
        orderItemId:
          type: string
          description: Identifier of the order item where the product was managed
        role:
          type: string
          description: role of the product order item for this product
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          RelatedProductOrderItem: '#/components/schemas/RelatedProductOrderItem'
    ProductPrice:
      description: >-
        An amount, usually of money, that represents the actual price paid by a Customer for a
        purchase, a rent or a lease of a Product. The price is valid for a defined period of time.
      type: object
      required:
        - priceType
        - price
      properties:
        description:
          type: string
          description: A narrative that explains in detail the semantics of this product price.
        name:
          type: string
          description: A short descriptive name such as "Subscription price".
        productOfferingPrice:
          $ref: '#/components/schemas/ProductOfferingPriceRef'
        billingAccount:
          $ref: '#/components/schemas/BillingAccountRef'
        priceType:
          type: string
          description: >-
            A category that describes the price, such as recurring, discount, allowance, penalty,
            and so forth.
        recurringChargePeriod:
          type: string
          description: 'Could be month, week...'
        unitOfMeasure:
          type: string
          description: 'Could be minutes, GB...'
        productPriceAlteration:
          type: array
          items:
            $ref: '#/components/schemas/PriceAlteration'
        price:
          $ref: '#/components/schemas/Price'
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          ProductPrice: '#/components/schemas/ProductPrice'
    ProductRelationship:
      description: >-
        Linked products to the one instantiate, such as [bundled] if the product is a bundle and you
        want to describe the bundled products inside this bundle; [reliesOn] if the product needs
        another already owned product to rely on (e.g. an option on an already owned mobile access
        product) [targets] or [isTargeted] (depending on the way of expressing the link) for any
        other kind of links that may be useful
      type: object
      required:
        - relationshipType
        - product
      properties:
        relationshipType:
          type: string
          description: >-
            Type of the product relationship, such as [bundled] if the product is a bundle and you
            want to describe the bundled products inside this bundle; [reliesOn] if the product
            needs another already owned product to rely on (e.g. an option on an already owned
            mobile access product) [targets] or [isTargeted] (depending on the way of expressing the
            link) for any other kind of links that may be useful
        product:
          $ref: '#/components/schemas/ProductRefOrValue'
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          ProductRelationship: '#/components/schemas/ProductRelationship'
    ProductSpecificationRef:
      description: >-
        Product specification reference: A ProductSpecification is a detailed description of a
        tangible or intangible object made available externally in the form of a ProductOffering to
        customers or other parties playing a party role.
      type: object
      properties:
        version:
          type: string
          description: Version of the product specification
        targetProductSchema:
          $ref: '#/components/schemas/TargetProductSchema'
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          ProductSpecificationRef: '#/components/schemas/ProductSpecificationRef'
    ProductTerm:
      description: >-
        Description of a productTerm linked to this product. This represent a commitment with a
        duration
      type: object
      properties:
        description:
          type: string
          description: Description of the productTerm
        duration:
          $ref: '#/components/schemas/Quantity'
        validFor:
          $ref: '#/components/schemas/TimePeriod'
        name:
          type: string
          description: Name of the productTerm
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          ProductTerm: '#/components/schemas/ProductTerm'
    ResourceRef:
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          ResourceRef: '#/components/schemas/ResourceRef'
    ServiceRef:
      description: 'Service reference, for when Service is used by other entities'
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          ServiceRef: '#/components/schemas/ServiceRef'
    RelatedPlaceRefOrValue:
      description: >-
        Related Entity reference. A related place defines a place described by reference or by value
        linked to a specific entity. The polymorphic attributes @type, @schemaLocation &
        @referredType are related to the place entity and not the RelatedPlaceRefOrValue class
        itself
      type: object
      properties:
        role:
          type: string
      required:
        - role
      allOf:
        - $ref: '#/components/schemas/PlaceRef'
        - $ref: '#/components/schemas/Place'
    ProductStatusType:
      type: string
      description: Possible values for the status of the product
      enum:
        - created
        - pendingActive
        - cancelled
        - active
        - pendingTerminate
        - terminated
        - suspended
        - 'aborted '
    TargetProductSchema:
      type: object
      description: >-
        The reference object to the schema and type of target product which is described by product
        specification
      properties:
        '@type':
          type: string
          description: Class type of the target product
        '@schemaLocation':
          type: string
          format: uri
          description: This field provides a link to the schema describing the target product
      required:
        - '@type'
        - '@schemaLocation'
    TimePeriod:
      description: 'A period of time, either as a deadline (endDateTime only) a startDateTime only, or both'
      type: object
      properties:
        startDateTime:
          description: 'Start of the time period, using IETC-RFC-3339 format'
          type: string
          format: date-time
          example: '1985-04-12T23:20:50.52Z'
        endDateTime:
          description: 'End of the time period, using IETC-RFC-3339 format'
          type: string
          format: date-time
          example: '1985-04-12T23:20:50.52Z'
    Any: {}
    CharacteristicRelationship:
      description: Another Characteristic that is related to the current Characteristic;
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the characteristic
        relationshipType:
          type: string
          description: The type of relationship
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          CharacteristicRelationship: '#/components/schemas/CharacteristicRelationship'
    PlaceRef:
      description: Place reference. PlaceRef defines the placeRefs where the products are sold or delivered.
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          PlaceRef: '#/components/schemas/PlaceRef'
    Place:
      description: Place reference. Place defines the places where the products are sold or delivered.
      type: object
      properties:
        href:
          type: string
          description: Unique reference of the place
        id:
          type: string
          description: Unique identifier of the place
        name:
          type: string
          description: 'A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]'
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          Place: '#/components/schemas/Place'
    CancelProductOrder:
      description: Request for cancellation an existing product order
      type: object
      required:
        - productOrder
      properties:
        productOrder:
          $ref: '#/components/schemas/ProductOrderRef'
      allOf:
        - $ref: '#/components/schemas/CancelOrder'
    ProductOrderRef:
      description: ProductOrder (ProductOrder) .The product order which the recommendation is related with.
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          ProductOrderRef: '#/components/schemas/ProductOrderRef'
    CancelOrder:
      description: A Order cancel is a type of task which  can  be used to place a request to cancel an order
      type: object
      properties:
        requestedCancellationDate:
          type: string
          format: date-time
          description: Date when the submitter wants the order to be cancelled
        href:
          type: string
          description: Hyperlink to access the cancellation request
        id:
          type: string
          description: id of the cancellation request (this is not an order id)
        effectiveCancellationDate:
          type: string
          format: date-time
          description: Date when the order is cancelled.
        cancellationReason:
          type: string
          description: Reason why the order is cancelled.
        state:
          $ref: '#/components/schemas/TaskStateType'
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          CancelOrder: '#/components/schemas/CancelOrder'
    TaskStateType:
      type: string
      description: Possible values for the state of a task
      enum:
        - accepted
        - terminatedWithError
        - inProgress
        - done
    BaseEvent:
      description: Base event with common attributes.
      type: object
      properties:
        event:
          $ref: '#/components/schemas/Any'
        eventId:
          type: string
          description: The identifier of the notification.
        eventTime:
          type: string
          format: date-time
          description: Time of the event occurrence.
        eventType:
          type: string
          description: The type of the notification.
        correlationId:
          type: string
          description: The correlation id for this event.
        domain:
          type: string
          description: The domain of the event.
        title:
          type: string
          description: The title of the event.
        description:
          type: string
          description: An explnatory of the event.
        priority:
          type: string
          description: A priority.
        timeOcurred:
          type: string
          format: date-time
          description: The time the event occured.
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          BaseEvent: '#/components/schemas/BaseEvent'
    ProductOrder_Create:
      type: object
      description: >-
        A Product Order is a type of order which  can  be used to place an order between a customer
        and a service provider or between a service provider and a partner and vice versa,
      properties:
        agreement:
          type: array
          description: A reference to an agreement defined in the context of the product order
          items:
            $ref: '#/components/schemas/AgreementRef'
        billingAccount:
          $ref: '#/components/schemas/BillingAccountRef'
        cancellationDate:
          type: string
          format: date-time
          description: 'Date when the order is cancelled. This is used when order is cancelled. '
        cancellationReason:
          type: string
          description: 'Reason why the order is cancelled. This is used when order is cancelled. '
        category:
          type: string
          description: >-
            Used to categorize the order from a business perspective that can be useful for the OM
            system (e.g. "enterprise", "residential", ...)
        channel:
          type: array
          items:
            $ref: '#/components/schemas/RelatedChannel'
        completionDate:
          type: string
          format: date-time
          description: Date when the order was completed
        description:
          type: string
          description: Description of the product order
        expectedCompletionDate:
          type: string
          format: date-time
          description: Expected delivery date amended by the provider
        externalId:
          type: string
          description: >-
            ID given by the consumer and only understandable by him (to facilitate his searches
            afterwards)
        href:
          type: string
          description: Hyperlink to access the order
        id:
          type: string
          description: ID created on repository side (OM system)
        note:
          type: array
          items:
            $ref: '#/components/schemas/Note'
        notificationContact:
          type: string
          description: Contact attached to the order to send back information regarding this order
        orderDate:
          type: string
          format: date-time
          description: Date when the order was created
        orderTotalPrice:
          type: array
          items:
            $ref: '#/components/schemas/OrderPrice'
        payment:
          type: array
          items:
            $ref: '#/components/schemas/PaymentRef'
        priority:
          type: string
          description: >-
            A way that can be used by consumers to prioritize orders in OM system (from 0 to 4 : 0
            is the highest priority, and 4 the lowest)
        productOfferingQualification:
          type: array
          items:
            $ref: '#/components/schemas/ProductOfferingQualificationRef'
        quote:
          type: array
          items:
            $ref: '#/components/schemas/QuoteRef'
        productOrderItem:
          type: array
          items:
            $ref: '#/components/schemas/ProductOrderItem'
          minItems: 1
        relatedParty:
          type: array
          items:
            $ref: '#/components/schemas/RelatedParty'
        requestedCompletionDate:
          type: string
          format: date-time
          description: Requested delivery date from the requestor perspective
        requestedStartDate:
          type: string
          format: date-time
          description: >-
            Order fulfillment start date wished by the requestor. This is used when, for any reason,
            requestor cannot allow seller to begin to operationally begin the fulfillment before a
            date. 
        state:
          $ref: '#/components/schemas/ProductOrderStateType'
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          ProductOrder: '#/components/schemas/ProductOrder_Create'
    ProductOrder_Update:
      type: object
      required:
        - productOrderItem
      description: >-
        A Product Order is a type of order which  can  be used to place an order between a customer
        and a service provider or between a service provider and a partner and vice versa,
      properties:
        agreement:
          type: array
          description: A reference to an agreement defined in the context of the product order
          items:
            $ref: '#/components/schemas/AgreementRef'
        billingAccount:
          $ref: '#/components/schemas/BillingAccountRef'
        cancellationDate:
          type: string
          format: date-time
          description: 'Date when the order is cancelled. This is used when order is cancelled. '
        cancellationReason:
          type: string
          description: 'Reason why the order is cancelled. This is used when order is cancelled. '
        category:
          type: string
          description: >-
            Used to categorize the order from a business perspective that can be useful for the OM
            system (e.g. "enterprise", "residential", ...)
        channel:
          type: array
          items:
            $ref: '#/components/schemas/RelatedChannel'
        completionDate:
          type: string
          format: date-time
          description: Date when the order was completed
        description:
          type: string
          description: Description of the product order
        expectedCompletionDate:
          type: string
          format: date-time
          description: Expected delivery date amended by the provider
        externalId:
          type: string
          description: >-
            ID given by the consumer and only understandable by him (to facilitate his searches
            afterwards)
        note:
          type: array
          items:
            $ref: '#/components/schemas/Note'
        notificationContact:
          type: string
          description: Contact attached to the order to send back information regarding this order
        orderTotalPrice:
          type: array
          items:
            $ref: '#/components/schemas/OrderPrice'
        payment:
          type: array
          items:
            $ref: '#/components/schemas/PaymentRef'
        priority:
          type: string
          description: >-
            A way that can be used by consumers to prioritize orders in OM system (from 0 to 4 : 0
            is the highest priority, and 4 the lowest)
        productOfferingQualification:
          type: array
          items:
            $ref: '#/components/schemas/ProductOfferingQualificationRef'
        quote:
          type: array
          items:
            $ref: '#/components/schemas/QuoteRef'
        productOrderItem:
          type: array
          items:
            $ref: '#/components/schemas/ProductOrderItem'
          minItems: 1
        relatedParty:
          type: array
          items:
            $ref: '#/components/schemas/RelatedParty'
        requestedCompletionDate:
          type: string
          format: date-time
          description: Requested delivery date from the requestor perspective
        requestedStartDate:
          type: string
          format: date-time
          description: >-
            Order fulfillment start date wished by the requestor. This is used when, for any reason,
            requestor cannot allow seller to begin to operationally begin the fulfillment before a
            date. 
        state:
          $ref: '#/components/schemas/ProductOrderStateType'
      allOf:
        - $ref: '#/components/schemas/Entity'
      discriminator:
        propertyName: '@type'
        mapping:
          ProductOrder: '#/components/schemas/ProductOrder_Update'
    ProductOrderCreateEvent:
      description: Example of a client listener for receiving the notification ProductOrderCreateEvent
      type: object
      properties:
        event:
          $ref: '#/components/schemas/ProductOrderEventPayload'
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
    ProductOrderAttributevaluechangeEvent:
      description: Example of a client listener for receiving the notification ProductOrderCreateEvent
      type: object
      properties:
        event:
          $ref: '#/components/schemas/ProductOrderEventPayload'
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
    ProductOrderDeleteEvent:
      description: Example of a client listener for receiving the notification ProductOrderCreateEvent
      type: object
      properties:
        event:
          $ref: '#/components/schemas/ProductOrderEventPayload'
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
    ProductOrderStatechangeEvent:
      description: Example of a client listener for receiving the notification ProductOrderCreateEvent
      type: object
      properties:
        event:
          $ref: '#/components/schemas/ProductOrderEventPayload'
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
    ProductOrderInformationrequiredEvent:
      description: Example of a client listener for receiving the notification ProductOrderCreateEvent
      type: object
      properties:
        event:
          $ref: '#/components/schemas/ProductOrderEventPayload'
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
    ProductOrderEventPayload:
      description: TBD
      type: object
      properties:
        productOrder:
          $ref: '#/components/schemas/ProductOrder'
    CancelProductOrder_Create:
      description: Request for cancellation an existing product order
      type: object
      properties:
        productOrder:
          $ref: '#/components/schemas/ProductOrderRef'
      allOf:
        - $ref: '#/components/schemas/CancelOrder'
    CancelProductOrderCreateEvent:
      description: Example of a client listener for receiving the notification CancelProductOrderCreateEvent
      type: object
      properties:
        event:
          $ref: '#/components/schemas/CancelProductOrderEventPayload'
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
    CancelProductOrderStatechangeEvent:
      description: Example of a client listener for receiving the notification CancelProductOrderCreateEvent
      type: object
      properties:
        event:
          $ref: '#/components/schemas/CancelProductOrderEventPayload'
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
    CancelProductOrderInformationrequiredEvent:
      description: Example of a client listener for receiving the notification CancelProductOrderCreateEvent
      type: object
      properties:
        event:
          $ref: '#/components/schemas/CancelProductOrderEventPayload'
      allOf:
        - $ref: '#/components/schemas/BaseEvent'
    CancelProductOrderEventPayload:
      description: TBD
      type: object
      properties:
        cancelProductOrder:
          $ref: '#/components/schemas/CancelProductOrder'
    Error:
      discriminator:
        propertyName: '@type'
        mapping:
          Error: '#/components/schemas/Error'
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          required:
            - code
            - reason
          properties:
            code:
              type: string
              description: 'Application relevant detail, defined in the API or a common list.'
            reason:
              type: string
              description: Explanation of the reason for the error which can be shown to a client user.
            message:
              type: string
              description: >-
                More details and corrective actions related to the error which can be shown to a
                client user.
            status:
              type: string
              description: HTTP Error code extension
            referenceError:
              type: string
              description: URI of documentation describing the error.
              format: uri
      description: 'Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)'
    EventSubscriptionInput:
      type: object
      description: >-
        Sets the communication endpoint address the service instance must use to deliver
        notification information
      required:
        - callback
      properties:
        callback:
          type: string
          description: The callback being registered.
        query:
          type: string
          description: additional data to be passed
    EventSubscription:
      type: object
      description: >-
        Sets the communication endpoint address the service instance must use to deliver
        notification information
      required:
        - id
        - callback
      properties:
        id:
          type: string
          description: Id of the listener
        callback:
          type: string
          description: The callback being registered.
        query:
          type: string
          description: additional data to be passed
  parameters:
    Id:
      name: id
      required: true
      schema:
        type: string
      in: path
      description: Identifier of the Service
    Fields:
      name: fields
      in: query
      description: Comma-separated properties to be provided in response
      schema:
        type: string
    Offset:
      name: offset
      in: query
      description: Requested index for start of resources to be provided in response
      schema:
        type: integer
    Limit:
      name: limit
      in: query
      description: Requested number of resources to be provided in response
      schema:
        type: integer
  requestBodies:
    ProductOrder_Create:
      description: The ProductOrder to be created
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ProductOrder_Create'
      required: true
    ProductOrder_Update:
      description: The ProductOrder to be updated
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ProductOrder_Update'
      required: true
    CancelProductOrder_Create:
      description: The CancelProductOrder to be created
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CancelProductOrder_Create'
      required: true
    EventSubscriptionInput:
      description: Data containing the callback endpoint to deliver the information
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/EventSubscriptionInput'
      required: true
  responses:
    '204':
      description: Deleted
      content: {}
    200ProductOrderArray:
      description: Success
      headers:
        X-Total-Count:
          $ref: '#/components/headers/X-Total-Count'
        X-Result-Count:
          $ref: '#/components/headers/X-Result-Count'
      content:
        application/json;charset=utf-8:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ProductOrder'
    200ProductOrder:
      description: Success
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ProductOrder'
    201ProductOrder:
      description: Created
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ProductOrder'
    200CancelProductOrderArray:
      description: Success
      headers:
        X-Total-Count:
          $ref: '#/components/headers/X-Total-Count'
        X-Result-Count:
          $ref: '#/components/headers/X-Result-Count'
      content:
        application/json;charset=utf-8:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CancelProductOrder'
    200CancelProductOrder:
      description: Success
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CancelProductOrder'
    201CancelProductOrder:
      description: Created
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CancelProductOrder'
    Error:
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    EventSubscription:
      description: Notified
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/EventSubscription'
  headers:
    X-Total-Count:
      description: Total number of items matching criteria
      schema:
        type: integer
    X-Result-Count:
      description: Actual number of items returned in the response body
      schema:
        type: integer
  securitySchemes: {}
